{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","src","alt","CardList","robots","map","robot","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundry","props","logComponentStackToMyService","errorInfo","console","log","state","logErrors","setState","toString","hasError","error","info","componentStack","this","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","response","json","data","catch","initialStateSearch","seachField","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5eb2612.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nconst Card = ({name, email, id}) => {\n    return (\n        <div className=\"tc bg-black light-green ma3 pa3 br3 ba dib b--purple shadow-5 grow\">\n            <img\n                src={`https://robohash.org/${id}?200x250\" alt=\"robots`}\n                alt=\"robot\"\n            />\n            <div>\n                <h2>{name}</h2>\n                <p className=\"ma0\">{email}</p>\n            </div>\n        </div>\n    )\n}\nexport default Card;","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n    /*if(true) {\n        throw new Error('Nooooo!');\n    }*/\n    return (\n        <ul>\n            <li>\n                {robots.map(robot => {\n                    return <Card\n                        key={robot.id}\n                        name={robot.name}\n                        email={robot.email}\n                        id={robot.id}\n                    />\n                })}\n            </li>\n        </ul>\n    )\n}\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div >\n            <input\n                className=\"pa3 ma3 br3 ba dib b--purple\"\n                type=\"search\"\n                placeholder=\"Enter the robot name\"\n                onChange={searchChange}\n            />\n        </div>\n\n    )\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = ({children}) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid', height: '100vh'}}>{children}</div>\n    );\n}\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            logErrors: [],\n        }\n    }\n\n    //лог ошибок\n    logComponentStackToMyService = (errorInfo) => {\n        console.log(this.state.logErrors);\n        this.setState({\n            logErrors: [\n                ...this.state.logErrors,\n                errorInfo.toString()\n            ]\n        }, () => console.log('err', this.state.logErrors[0]))\n    }\n\n    componentDidCatch(error, info) {\n        console.log(info.componentStack)\n        this.logComponentStackToMyService(info.componentStack)\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true };\n    }\n\n    render() {\n\n        if(this.state.hasError) {\n           // alert()\n            return <h1 className=\"light-green\">Ooops! Something went wrong...</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport {connect} from 'react-redux';\nimport {setSearchField, requestRobots} from '../actions';\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField || '' ,//can be undefined\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error,\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)), //key name equals to reducer, ex method in App,\n        onRequestRobots: () => dispatch(requestRobots()) //equals to reducer\n    }\n}\nclass App extends Component {\n    //initialState is in reducers.js\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n\n    render() {\n        //console.log(this.props.store.getState())\n        //alert('App rendered')\n\n        const {searchField, onSearchChange, robots, isPending, error} = this.props;\n        const filteredRobots = robots.filter( robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n\n        if (isPending) {\n            return <h1 className=\"f1 light-green\">Loading robots...</h1>\n        }\n        if (error) {\n            return <h1 className=\"f1 light-green\">Something went wrong...</h1>\n        }else {\n            return (\n                <div className=\"tc\">\n                    <h1 className=\"f1 light-green\">RoboFriends</h1>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n        }\n\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nexport const setSearchField = (text) => {\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n};\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch( error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialStateSearch = {\n    seachField: '',\n}\n\nexport const searchRobots = (state = initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return {\n                ...state,\n                searchField: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = ( state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {\n                ...state,\n                isPending: true\n            }\n        case REQUEST_ROBOTS_SUCCESS:\n            return {\n                ...state,\n                isPending: false,\n                robots: action.payload\n            }\n        case REQUEST_ROBOTS_FAILED:\n            return {\n                ...state,\n                isPending: false,\n                error: action.payload\n            }\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport reportWebVitals from './reportWebVitals';\nimport {createLogger} from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\n\nimport './index.css';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport {searchRobots, requestRobots} from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({\n    searchRobots,\n    requestRobots,\n})\nconst store = createStore(rootReducer,  applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n\n      <Provider store={store}>\n          <App />\n      </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}